// Author: Joel Hernandez James  
// Current Date: 2025-05-11  
// Class: TasksPanel

// Description:  
// Tasks panel component showing real-time tasks generated by the model

import React, { useState } from 'react';
import { 
  Card, 
  CardContent, 
  Typography, 
  Box,
  Collapse,
  Chip,
  IconButton,
  Tooltip,
  useTheme
} from '@mui/material';
import {
  Code as CodeIcon,
  ExpandMore as ExpandMoreIcon,
  ExpandLess as ExpandLessIcon,
  CheckCircle as SuccessIcon,
  Cancel as FailureIcon
} from '@mui/icons-material';
import { useDataContext } from '../contexts/DataContext';

const TasksPanel = () => {
  const theme = useTheme();
  const { trainingData } = useDataContext();
  const [expandedTasks, setExpandedTasks] = useState({});
  
  // Toggle task expansion
  const toggleTaskExpansion = (taskId) => {
    setExpandedTasks(prev => ({
      ...prev,
      [taskId]: !prev[taskId]
    }));
  };
  
  // Format task difficulty as a color
  const getDifficultyColor = (difficulty) => {
    if (difficulty < 0.3) return theme.palette.success.main;
    if (difficulty < 0.6) return theme.palette.warning.main;
    return theme.palette.error.main;
  };
  
  // Format task type as a color
  const getTaskTypeColor = (type) => {
    switch (type.toLowerCase()) {
      case 'deduction':
        return theme.palette.primary.main;
      case 'abduction':
        return theme.palette.secondary.main;
      case 'induction':
        return theme.palette.info.main;
      default:
        return theme.palette.text.secondary;
    }
  };
  
  return (
    <Card>
      <CardContent>
        <Typography variant="h2" gutterBottom>
          Recent Tasks
        </Typography>
        
        {trainingData.recentTasks && trainingData.recentTasks.length > 0 ? (
          <Box className="task-list">
            {trainingData.recentTasks.map((task) => (
              <Box 
                key={task.id} 
                className={`task-item ${expandedTasks[task.id] ? 'expanded' : ''}`}
                sx={{ 
                  bgcolor: theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.05)' : 'rgba(0,0,0,0.03)',
                  borderLeft: `4px solid ${getTaskTypeColor(task.type)}`,
                  borderRadius: 1,
                  mb: 2,
                  p: 2,
                  transition: 'all 0.3s ease',
                  '&:hover': {
                    boxShadow: '0 4px 8px rgba(0,0,0,0.1)',
                    transform: 'translateY(-2px)'
                  }
                }}
              >
                <Box 
                  className="task-header" 
                  sx={{ 
                    display: 'flex', 
                    justifyContent: 'space-between',
                    alignItems: 'center',
                    mb: 1,
                    flexWrap: 'wrap',
                    gap: 1
                  }}
                >
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <Typography 
                      variant="subtitle1" 
                      fontWeight="bold" 
                      className="task-id"
                    >
                      Task #{task.id}
                    </Typography>
                    
                    <Chip 
                      label={task.type}
                      size="small"
                      sx={{ 
                        bgcolor: `${getTaskTypeColor(task.type)}20`,
                        color: getTaskTypeColor(task.type),
                        fontWeight: 'bold'
                      }}
                    />
                    
                    <Chip 
                      label={`Difficulty: ${task.difficulty.toFixed(2)}`}
                      size="small"
                      sx={{ 
                        bgcolor: `${getDifficultyColor(task.difficulty)}20`,
                        color: getDifficultyColor(task.difficulty),
                        fontWeight: 'bold'
                      }}
                    />
                  </Box>
                  
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <Chip 
                      icon={task.solved ? <SuccessIcon /> : <FailureIcon />}
                      label={task.solved ? 'Solved' : 'Failed'}
                      color={task.solved ? 'success' : 'error'}
                      size="small"
                      variant="filled"
                    />
                    
                    <Tooltip title={expandedTasks[task.id] ? "Collapse" : "Expand"}>
                      <IconButton 
                        size="small" 
                        onClick={() => toggleTaskExpansion(task.id)}
                        sx={{ ml: 1 }}
                      >
                        {expandedTasks[task.id] ? <ExpandLessIcon /> : <ExpandMoreIcon />}
                      </IconButton>
                    </Tooltip>
                  </Box>
                </Box>
                
                <Typography variant="body1" className="task-description" sx={{ mb: 2 }}>
                  {task.description}
                </Typography>
                
                <Collapse in={expandedTasks[task.id]}>
                  <Box className="task-details">
                    {task.solved && task.solution && (
                      <Box 
                        className="code-preview" 
                        sx={{ 
                          bgcolor: theme.palette.mode === 'dark' ? 'rgba(0,0,0,0.3)' : 'rgba(0,0,0,0.05)',
                          borderRadius: 1,
                          p: 2,
                          mb: 2,
                          overflow: 'auto',
                          maxHeight: '300px'
                        }}
                      >
                        <Typography variant="subtitle2" sx={{ mb: 1, display: 'flex', alignItems: 'center' }}>
                          <CodeIcon sx={{ mr: 1, fontSize: '1rem' }} />
                          Solution:
                        </Typography>
                        <pre style={{ margin: 0, overflow: 'auto' }}>
                          <code>{task.solution}</code>
                        </pre>
                      </Box>
                    )}
                    
                    {!task.solved && (
                      <Box 
                        sx={{ 
                          bgcolor: `${theme.palette.error.main}10`,
                          color: theme.palette.error.main,
                          p: 2,
                          borderRadius: 1,
                          display: 'flex',
                          alignItems: 'center'
                        }}
                      >
                        <FailureIcon sx={{ mr: 1 }} />
                        <Typography variant="body2">
                          The model was unable to solve this task.
                        </Typography>
                      </Box>
                    )}
                    
                    <Box 
                      sx={{ 
                        display: 'flex', 
                        justifyContent: 'space-between',
                        mt: 2,
                        pt: 2,
                        borderTop: `1px solid ${theme.palette.divider}`
                      }}
                    >
                      <Typography variant="caption" color="textSecondary">
                        Generated at: {new Date(task.timestamp * 1000).toLocaleString()}
                      </Typography>
                      
                      {task.solved && (
                        <Chip 
                          size="small"
                          label="Added to training buffer"
                          color="primary"
                          variant="outlined"
                        />
                      )}
                    </Box>
                  </Box>
                </Collapse>
              </Box>
            ))}
          </Box>
        ) : (
          <Box 
            sx={{ 
              p: 4, 
              textAlign: 'center',
              color: theme.palette.text.secondary
            }}
          >
            <Typography variant="body1">
              No tasks generated yet. Training will begin generating tasks soon.
            </Typography>
          </Box>
        )}
      </CardContent>
    </Card>
  );
};

export default TasksPanel;
